# -*- coding: utf-8 -*-
"""3_Cleaning_of_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Abhishek-jakhar/Machine_learning/blob/main/3_Cleaning_of_data.ipynb

**Dirty Data**(Data with Quality issues): Dirty data, also known as low quality
data. Low quality data has content issues.

*  Duplicated data
*  Missing Data
*  Corrupt Data
*   
Inaccurate Data




**Messy Data** (Data with tidiness issues): Messy data, also known as untidy data. Untidy data has structural issues.Tidy data has the following properties:

*  Each variable forms a column
*  Each observation forms a row
*  Each observational unit forms a table
"""

import pandas as pd
import numpy as np

patient = pd.read_csv('/content/patients.csv')
treatment = pd.read_csv('/content/treatments.csv')
adverse_reaction = pd.read_csv('/content/adverse_reactions.csv')
treatment_cut = pd.read_csv('/content/treatments_cut.csv')

treatment.info()

treatment_cut.info()

patient

treatment.head()

treatment_cut.head()

adverse_reaction

"""**1. Write a summary for your data**

This is a dataset about 500 patients of which 350 patients participated in a clinical trial. None of the patients were using Novodra (a popular injectable insulin) or Auralin (the oral insulin being researched) as their primary source of insulin before. All were experiencing elevated HbA1c levels.

All 350 patients were treated with Novodra to establish a baseline HbA1c level and insulin dose. After 4 weeks, which isnâ€™t enough time to capture all the change in HbA1c that can be attributed by the switch to Auralin or Novodra:

* 175 patients switched to Auralin for 24 weeks
* 175 patients continued using Novodra for 24 weeks

Data about patients feeling some adverse effects is also recorded

**2. Write Column descriptions**

**Table** -> patients:
**bold text**


*   **patient_id:** the unique identifier for each patient in the Master Patient Index (i.e. patient database) of the pharmaceutical company that is producing Auralin
*   **assigned_sex:** the assigned sex of each patient at birth (male or female)
*   **given_name:** the given name (i.e. first name) of each patient
*   **surname:** the surname (i.e. last name) of each patient
*   **address:** the main address for each patient
*   **city:** the corresponding city for the main address of each patient
*   **state:** the corresponding state for the main address of each patient
*   **zip_code:** the corresponding zip code for the main address of each patient
*   **country:** the corresponding country for the main address of each patient (all United states for this clinical trial)
*   **contact:** phone number and email information for each patient
*   **birthdate:** the date of birth of each patient (month/day/year). The inclusion criteria for this clinical trial is age >= 18 (there is no maximum age because diabetes is a growing problem among the elderly population)
*   **weight:** the weight of each patient in pounds (lbs)
*   **height:** the height of each patient in inches (in)
*   **bmi:** the Body Mass Index (BMI) of each patient. BMI is a simple calculation using a person's height and weight. The formula of BMI is = kg/m2 where kg is a person's weight in kilograms and m2 is their height in metres squared. A BMI of 25.0 or more is overweight, while the healthy range is 18.5 to 24.9. The inclusion criteria for this clinical trial is 16 >= BMI >= 38.

#### **Table** -> `treatments` and `treatment_cut`:

- `given_name`: the given name of each patient in the Master Patient Index that took part in the clinical trial
- `surname`: the surname of each patient in the Master Patient Index that took part in the clinical trial
- `auralin`: the baseline median daily dose of insulin from the week prior to switching to Auralin (the number before the dash) and the ending median daily dose of insulin at the end of the 24 weeks of treatment measured over the 24th week of treatment (the number after the dash). Both are measured in units (shortform 'u'), which is the international unit of measurement and the standard measurement for insulin.
- `novodra`: same as above, except for patients that continued treatment with Novodra
- `hba1c_start`: the patient's HbA1c level at the beginning of the first week of treatment. HbA1c stands for Hemoglobin A1c. The HbA1c test measures what the average blood sugar has been over the past three months. It is thus a powerful way to get an overall sense of how well diabetes has been controlled. Everyone with diabetes should have this test 2 to 4 times per year. Measured in %.
- `hba1c_end`: the patient's HbA1c level at the end of the last week of treatment
- `hba1c_change`: the change in the patient's HbA1c level from the start of treatment to the end, i.e., hba1c_start - hba1c_end. For Auralin to be deemed effective, it must be "noninferior" to Novodra, the current standard for insulin. This "noninferiority" is statistically defined as the upper bound of the 95% confidence interval being less than 0.4% for the difference between the mean HbA1c changes for Novodra and Auralin (i.e. Novodra minus Auralin).

#### **Table** -> `adverse_reactions`

- `given_name`: the given name of each patient in the Master Patient Index that took part in the clinical trial and had an adverse reaction (includes both patients treated Auralin and Novodra)
- `surname`: the surname of each patient in the Master Patient Index that took part in the clinical trial and had an adverse reaction (includes both patients treated Auralin and Novodra)
- `adverse_reaction`: the adverse reaction reported by the patient

### 3. Add any additional information

Additional useful information:

- Insulin resistance varies person to person, which is why both starting median daily dose and ending median daily dose are required, i.e., to calculate change in dose.
- It is important to test drugs and medical products in the people they are meant to help. People of different age, race, sex, and ethnic group must be included in clinical trials. This diversity is reflected in the patients table.

### Types of Assessment
There are 2 types of assessment styles

- `Manual` - Looking through the data manually in google sheets
- `Programmatic` - By using pandas functions such as info(), describe() or sample()

### Steps in Assessment
There are 2 steps involved in Assessment

- Discover
- Document
"""

from csv import writer
# looking data manualluy

with pd.ExcelWriter('cleaning_data_enteries.xlsx') as writer:
        patient.to_excel(writer,sheet_name='patients')
        treatment.to_excel(writer,sheet_name='treatment')
        treatment_cut.to_excel(writer,sheet_name='treatment_cut')
        adverse_reaction.to_excel(writer,sheet_name='adverse_reaction')

"""### Issues with the dataset

1. Dirty Data

  Table - `Patients`

    - patient_id = 9 has misspelled name 'Dsvid' instead of David `accuracy`
    - state col sometimes contain full name and some times abbrivietation `consistency`
    - zip code col has entries with 4 digit `validity`
    - data missing for 12 patients in address,city,	state,zip_code	,country,	contact `completion`
    - incorrect data type assigned to sex, zip code, birthdate `validity`
    - duplicate entries by the name of John Doe `accuracy`
    - one patient has weight = 48 pounds `accuracy`
    - one patient has height = 27 inches `accuracy`

  Table - `Treatments` & `Treatments_cut`

    - given_name and surname col is is all lower case `consistency`
    - remove u from Auralin and Novadra cols `validity`
    - '-' in novadra and Auralin col treated as nan `validity`
    - missing values in hba1c_change col `completion`
    - 1 duplicate entry by the name Joseph day `accuracy`
    - in hba1c_change 9 instead of 4 `accuracy`

  Table - `Adverse_reactions`

    - given_name and surname are all in lower case `consistency`

2. Messy Data

  Table - `Patients`

    - contact col contains both phone and email

  Table - `Treatments` & `Treatments_cut`

    - Auralin and Novadra col should be split into 2 cols start and end dose
    - merge both the tables

  Table - `Adverse_reactions`

    - This table should not exist independently

### Automatic Assessment

- head and tail
- sample
- info
- isnull
- duplicated
- describe
"""

patient.info()

patient[patient['address'].isnull()]

patient[patient.duplicated(subset=['given_name','surname'])]

treatment.duplicated().sum()

treatment[treatment.duplicated()]

treatment.duplicated(subset=['given_name','surname']).sum()

treatment[treatment.duplicated(subset=['given_name','surname'])]

"""### Data Quality Dimensions

- Completeness -> is data missing?
- Validity -> is data invalid -> negative height -> duplicate patient id
- Accuracy -> data is valid but not accurate -> weight -> 1kg
- Consistency -> both valid and accurate but written differently -> New Youk and NY

### Order of severity

Completeness <- Validity <- Accuracy <- Consistency

### Data Cleaning Order

1. Quality -> Completeness
2. Tidiness
3. Quality -> Validity
4. Quality -> Accuracy
5. Quality -> Consistency

#### Steps involved in Data cleaning
- Define
- Code
- Test

`Always make sure to create a copy of your pandas dataframe before you start the cleaning process`
"""

patient_df = patient.copy()
adverse_reaction_df = adverse_reaction.copy()
treatment_df = treatment.copy()
treatment_cut_df = treatment_cut.copy()

"""### Define
- replace all the missing value by NO DATA
- subtract hba1c_start from hba1c_end to get all the change values

"""

#code
patient[patient['address'].isnull()]
patient_df.fillna('NO DATA',inplace=True)

#testing
patient.info()
patient_df.info()

treatment

#code
treatment_df['hba1c_change']= treatment_df['hba1c_start']-treatment_df['hba1c_end']
treatment_df

#test
treatment_df.info()
treatment.info()

treatment_df

treatment_df = pd.concat([treatment_df,treatment_cut_df])
treatment_df

treatment_df = treatment_df.melt(id_vars=['given_name', 'surname' ,'hba1c_start', 'hba1c_end','hba1c_change'])  #,var_name='type',value_name='dosage_range')

treatment_df

treatment_df=treatment_df.rename(columns={'variable': 'type','value':' dosage_range'})
treatment_df

treatment_df=treatment_df[treatment_df[' dosage_range'] != '-']
treatment_df

treatment_df[' dosage_range'].str.split('-')
treatment_df['dosage_start']=treatment_df[' dosage_range'].str.split('-').str.get(0)
treatment_df['dosage_end']=treatment_df[' dosage_range'].str.split('-').str.get(1)
treatment_df

# treatment_df.drop(columns='dosage_range',inplace=True)

treatment_df['dosage_start'] = treatment_df['dosage_start'].str.replace('u','')
treatment_df['dosage_end'] = treatment_df['dosage_end'].str.replace('u','')
treatment_df



treatment_df['dosage_start'] = treatment_df['dosage_start'].astype('int')
treatment_df['dosage_end'] = treatment_df['dosage_end'].astype('int')

